@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Options
@using MenuFlix.Web.Client.Pages.Components
@using MudBlazor.Extensions.Helper
@using MudBlazor.Utilities
@using Nextended.Core.Extensions
@using System.Security.Claims
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
<AuthorizeView>
    <NotAuthorized>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
            @* <MudButton Variant="Variant.Filled" Color="@(IsCustomer ? Color.Warning : Color.Dark)" OnClick="@(() => AuthAction("login"))" Size="Size.Small">Login</MudButton> *@
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => AuthAction("login"))" Size="Size.Small">Login</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => AuthAction("register"))" Size="Size.Small">SignUp</MudButton>
            
                <MudBadge Content="3" Overlap Color="Color.Warning">
                   <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" ButtonType="ButtonType.Button" Size="Size.Medium" Color="Color.Error" />
                </MudBadge>
                     
        </MudStack>
    </NotAuthorized>
    <Authorizing>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudSkeleton Width="30px" Height="42px;" />
            <MudSkeleton Width="30px" Height="42px;" />
        </MudStack>
    </Authorizing>
 
    <Authorized>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudText Style="color: white" Class="py-3" Typo="Typo.h6">Hello, @name!</MudText>          
            <MudBadge Content="3" Overlap Color="Color.Warning">
                <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" ButtonType="ButtonType.Button" Size="Size.Medium" Style="color: white" />
            </MudBadge>
            <MudMenu Class="my-3">
                <ActivatorContent>                                                              
                    <MudImage Src="@profilePic" Elevation="4" Class="rounded-circle" ObjectFit="ObjectFit.Contain" Width="40" Height="40"></MudImage>                                        
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Person">Account</MudMenuItem>
                    <MudMenuItem IconSize="Size.Small" OnClick="BeginLogout" Icon="@Icons.Material.Filled.Logout">Log Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </MudStack>
    </Authorized>        
</AuthorizeView>

@code {
    string profilePic = String.Empty;
    string name = String.Empty;
    protected List<Claim> UserClaims { get; set; } = new List<Claim>();
    private bool IsCustomer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsCustomer = user.IsInRole("Customer");
        // Check if the user is authenticated
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();

            foreach(var item in UserClaims)
            {
                Console.WriteLine($"{item.Type}: {item.Value}");
                if (item.Type == "picture")
                {
                    profilePic = item.Value;
                }
                if (item.Type == "nickname")
                {
                    name = item.Value;
                }
            }

            if (!IsCustomer)
            {
                Navigation.NavigateTo("/home");
            }
        }
        else
        {
            // Handle the case where the user is not authenticated
        }
    }
    
    private void BeginLogout(MouseEventArgs args)
    {
        Navigation.NavigateToLogout("authentication/logout");
    }

    private void AuthAction(string action)
    {        
            Navigation.NavigateToLogout($"authentication/{action}");        
    }
          

    // private async Task Prompt()
    // {
    //     var options = new DialogOptionsEx
    //         {
    //             CloseButton = true,
    //             Position = DialogPosition.Center,
    //             Animation = AnimationType.SlideIn,
    //             AnimationDuration = TimeSpan.FromMilliseconds(500),
    //             FullWidth = true,                
    //             MaxWidth = MaxWidth.Medium,
    //             MaxHeight = MaxHeight.Medium
    //         };
       
    //     var parameters = new DialogParameters<LoginDialog> { { x => x.server, "Hello" } };
    //     var dialog = await DialogService.ShowEx<LoginDialog>("Your Dialog Title", parameters, options);               
    // }


}