@page "/store"
@layout MainLayout
@using MenuFlix.Web.Shared
@using MenuFlix.Web.Shared.Models
@using Newtonsoft.Json
@inject HttpClient Http
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Store Management</PageTitle>

<MudItem xs="12" Class="float-end">
    <MudBreadcrumbs Items="_items" Class="pointer-events-none"></MudBreadcrumbs>
</MudItem>
<MudItem xs="12">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="New Applications">
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="d-flex flex-grow-1 pt-3">
                <MudItem xs="12" md="8" sm="6">
                    <MudDataGrid T="UserDto.Index" Items="@users" Loading="_loading" Hover ColumnResizeMode="ResizeMode.Column" Filterable Height="500px;">
                        <Columns>
                            <PropertyColumn Property="x => x.FullName" HeaderClass="blue darken-1 shades-text text-white" Title="Name" />
                            <TemplateColumn Title="Provider" HeaderClass="blue darken-1 shades-text text-white">
                                <CellTemplate>
                                    @if (context.Item.Provider.Contains("google"))
                                    {
                                        <MudIcon Icon="@Icons.Custom.Brands.Google" Color="Color.Error" />
                                    }
                                    else if (context.Item.Provider.Contains("facebook"))
                                    {
                                        <MudIcon Icon="@Icons.Custom.Brands.Facebook" Color="Color.Primary" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Tertiary" />
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.Email" HeaderClass="blue darken-1 shades-text text-white" />
                            <TemplateColumn Title="Application Status" HeaderClass="blue darken-1 shades-text text-white">
                                <CellTemplate>
                                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" OverrideStyles="false">
                                        <MudButton Color="Color.Success" Size="Size.Small" StartIcon="@Icons.Material.Filled.ThumbUp" OnClick="@(() => UpdateOwner(context.Item.Auth0Id))" Variant="Variant.Filled">Approve</MudButton>
                                        <MudButton Color="Color.Error" Size="Size.Small" EndIcon="@Icons.Material.Filled.ThumbDown" OnClick="@(() => MergeUserInfo(context.Item.Auth0Id))" Variant="Variant.Filled">Reject</MudButton>
                                    </MudButtonGroup>
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.Position" HeaderClass="blue darken-1 shades-text text-white" />
                            <PropertyColumn Property="x => x.UpdatedOn" Title="Date Modified" HeaderClass="blue darken-1 shades-text text-white" />
                        </Columns>
                        <NoRecordsContent>No available records to show.</NoRecordsContent>
                        <PagerContent>
                            <MudDataGridPager T="UserDto.Index" />
                        </PagerContent>
                    </MudDataGrid>
                </MudItem>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Approved Stores">
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="d-flex flex-grow-1 pt-3">
                <MudItem xs="12" md="8" sm="6">
                    <MudDataGrid T="UserDto.Index" Items="@users_approved" Loading="_loading" Hover ColumnResizeMode="ResizeMode.Column" Filterable Height="500px;">
                        <Columns>
                            <PropertyColumn Property="x => x.FullName" HeaderClass="blue darken-1 shades-text text-white" Title="Name" />
                            <TemplateColumn Title="Provider" HeaderClass="blue darken-1 shades-text text-white">
                                <CellTemplate>
                                    @if (context.Item.Provider.Contains("google"))
                                    {
                                        <MudIcon Icon="@Icons.Custom.Brands.Google" Color="Color.Error" />
                                    }
                                    else if (context.Item.Provider.Contains("facebook"))
                                    {
                                        <MudIcon Icon="@Icons.Custom.Brands.Facebook" Color="Color.Primary" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Tertiary" />
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.Email" HeaderClass="blue darken-1 shades-text text-white" />
                            <TemplateColumn Title="Application Status" HeaderClass="blue darken-1 shades-text text-white">
                                <CellTemplate>
                                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" OverrideStyles="false">
                                        <MudButton Color="Color.Success" Size="Size.Small" StartIcon="@Icons.Material.Filled.ThumbUp" OnClick="@(() => UpdateOwner(context.Item.Auth0Id))" Variant="Variant.Filled">Approve</MudButton>
                                        <MudButton Color="Color.Error" Size="Size.Small" EndIcon="@Icons.Material.Filled.ThumbDown" Variant="Variant.Filled">Reject</MudButton>
                                    </MudButtonGroup>
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.Position" HeaderClass="blue darken-1 shades-text text-white" />
                            <PropertyColumn Property="x => x.UpdatedOn" Title="Date Modified" HeaderClass="blue darken-1 shades-text text-white" />
                        </Columns>
                        <NoRecordsContent>No available records to show.</NoRecordsContent>
                        <PagerContent>
                            <MudDataGridPager T="UserDto.Index" />
                        </PagerContent>
                    </MudDataGrid>
                </MudItem>
            </MudStack>
        </MudTabPanel>             
    </MudTabs>

</MudItem>
@code {
    private IEnumerable<UserDto.Index>? users;
    private IEnumerable<UserDto.Index>? users_approved;
    private bool _loading = true;
    [CascadingParameter] public Owner owner { get; set; }
    private string[] assignedOwner = new string[] { String.Empty };
    private UserInfo _userinfo = new UserInfo();
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Administrator", href: "#", icon: Icons.Material.Filled.AccountCircle),
        new BreadcrumbItem("Store Management", href: "#", icon: Icons.Material.Filled.Storefront)        
    };
    protected override async Task OnInitializedAsync()
    {
        await GetApplications();
        await GetApprovedApplications();
        
        _loading = false;
        await base.OnInitializedAsync();

    }   


    private async Task GetApplications()
    {
        users = new List<UserDto.Index>();
        users = await Http.GetFromJsonAsync<UserDto.Index[]>("user/applications");
    }

    private async Task GetApprovedApplications()
    {
        users_approved = new List<UserDto.Index>();
        users_approved = await Http.GetFromJsonAsync<UserDto.Index[]>("user/approved");
    }

    private async Task UpdateOwner(string _assignedOwner)
    {
        try
        {
            assignedOwner[0] = _assignedOwner;
            var response = await Http.PostAsJsonAsync<string[]>("updateowner", assignedOwner);

            response.EnsureSuccessStatusCode();

            var result = await response.Content.ReadAsStringAsync();         
            await GetApplications();
            await GetApprovedApplications();
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {            
            Console.WriteLine($"Error updating owner: {ex.Message}");
        }
    }

    private async Task MergeUserInfo(string uid)
    {
        try
        {            
            var response = await Http.PostAsJsonAsync<string>("values/merge", uid);

            response.EnsureSuccessStatusCode();

            var result = await response.Content.ReadAsStringAsync();
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inserting User Id: {ex.Message}");
        }
    }

    private async Task UserIdExist()
    {
        try
        {
            // UserID to check
            string userId = "google-oauth2|110139452400901793690";

            // Send HTTP POST request to the API endpoint
            var response = await Http.PostAsJsonAsync("values/checkexist", userId);

            // Ensure the request was successful
            response.EnsureSuccessStatusCode();

            // Read the response content
            var result = await response.Content.ReadAsStringAsync();
            dynamic resultObject = JsonConvert.DeserializeObject(result);
            int count = resultObject[0].count;
            Console.WriteLine($"Returned: {count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in UserIdExist: {ex.Message}");
        }
    }


    // private async Task UserIdExist()
    // {
    //     try
    //     {
            
    //         string userId = "google-oauth2|110139452400901793690";

            
    //         var response = await Http.GetAsync($"values?userId={userId}");

            
    //         response.EnsureSuccessStatusCode();
            
    //         var result = await response.Content.ReadAsStringAsync();
    //         Console.WriteLine(result);
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error in UserIdExist: {ex.Message}");
    //     }
    // }
}